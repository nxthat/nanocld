name: Release

on:
  push:
    branches:
      - 'release-*'
  pull_request:
    branches:
      - 'release-*'
    types: [opened, synchronize, closed]

env:
  CARGO_TERM_COLOR: always

jobs:
  release_image:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    # Cache Docker images
    - uses: actions/cache@v3
      with:
        path: /var/lib/docker/image
        key: docker-image-cache
    - name: Set branch name
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
    - name: Print branch name
      run: echo $BRANCH_NAME
    - name: Set version
      run: echo "IMAGE_VERSION=$(echo ${BRANCH_NAME##*-})" >> $GITHUB_ENV
    - name: Print version
      run: echo $IMAGE_VERSION
    - name: Build image
      run: docker build -t nanocl-daemon:$IMAGE_VERSION .
    - name: Export image
      run: docker save nanocl-daemon:$IMAGE_VERSION | gzip > /tmp/nanocl-daemon:$IMAGE_VERSION.tar.gz
    - name: Test if release already exists
      id: release-exists
      continue-on-error: true
      run: gh release view v$IMAGE_VERSION
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    - name: Create new draft release
      if: steps.release-exists.outcome == 'failure' && steps.release-exists.conclusion == 'success'
      run: gh release create -d v$IMAGE_VERSION --generate-notes /tmp/nanocl-daemon:$IMAGE_VERSION.tar.gz#Image
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    - name: Update draft release
      if: steps.release-exists.outcome == 'success' && steps.release-exists.conclusion == 'success'
      run: >-
        gh release delete-asset -y v$IMAGE_VERSION nanocl-daemon.$IMAGE_VERSION.tar.gz;
        gh release upload v$IMAGE_VERSION /tmp/nanocl-daemon:$IMAGE_VERSION.tar.gz#Image;
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    - name: Publish release
      if: ((github.event.action == 'closed' && github.event.pull_request.merged == true))
      run: gh release edit v$IMAGE_VERSION --draft=false
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
    - name: Delete release
      if: ((github.event.action == 'closed' && github.event.pull_request.merged != true))
      run: gh release delete v$IMAGE_VERSION
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
